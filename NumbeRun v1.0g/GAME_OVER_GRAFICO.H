
		/*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
		*																	*
		*							*** GAME OVER ***						*
		*																	*
		*	Nome:			GAME_OVER_GRAFICO.H								*
		*	Programmato da: Montalbano Marco								*
		*	Grafica di:		Montalbano Marco								*
		*	Genere:			Libreria del gioco (game over grafico del gioco)*
		*	Piattaforma:	Windows											*
		*	Copyright:		2005 / 2006										*
		*																	*
		*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*/



//Elenco funzioni contenute
	//funzione principale del gioco
		void MOSTRA_GAME_OVER_GRAFICO();
	//matrice per la posizione della grafica nel gioco
		void carica_matrice_del_game_over();
	//disegna la grafica del menù
		void DISEGNA_GAME_OVER_GRAFICA();
	//

bool game_over_gia_stampato = true;

void MOSTRA_GAME_OVER_GRAFICO()
{

	stampa_niente = true;

	if (game_over_gia_stampato == false)
	{

		game_over_gia_stampato = true;

		//Pulisce l'intero schermo
			glClear(GL_COLOR_BUFFER_BIT);
		azzera_matrice();
		DISEGNA_GAME_OVER_GRAFICA();
		carica_matrice_del_game_over();
		DISEGNA_GAME_OVER_GRAFICA();
	
	}
}

void carica_matrice_del_game_over()
{


A[2][15] = 9;
A[2][25] = 6;
A[3][5] = 4;
A[3][6] = 10;
A[3][7] = 10;
A[3][8] = 10;
A[3][9] = 10;
A[3][10] = 10;
A[3][11] = 3;
A[3][31] = 8;
A[3][43] = 9;
A[4][5] = 10;
A[4][6] = 10;
A[4][7] = 10;
A[4][8] = 10;
A[4][9] = 10;
A[4][10] = 10;
A[4][11] = 2;
A[4][52] = 6;
A[4][75] = 9;
A[5][5] = 10;
A[5][6] = 10;
A[5][13] = 4;
A[5][14] = 10;
A[5][15] = 10;
A[5][16] = 10;
A[5][17] = 10;
A[5][18] = 3;
A[5][20] = 4;
A[5][21] = 3;
A[5][27] = 4;
A[5][28] = 3;
A[5][30] = 4;
A[5][31] = 10;
A[5][32] = 10;
A[5][33] = 10;
A[5][34] = 10;
A[5][35] = 10;
A[5][36] = 3;
A[5][59] = 8;
A[5][67] = 6;
A[6][5] = 10;
A[6][6] = 10;
A[6][13] = 10;
A[6][14] = 10;
A[6][15] = 10;
A[6][16] = 10;
A[6][17] = 10;
A[6][18] = 10;
A[6][20] = 10;
A[6][21] = 10;
A[6][27] = 10;
A[6][28] = 10;
A[6][30] = 10;
A[6][31] = 10;
A[6][32] = 10;
A[6][33] = 10;
A[6][34] = 10;
A[6][35] = 10;
A[6][36] = 2;
A[7][5] = 10;
A[7][6] = 10;
A[7][8] = 4;
A[7][9] = 10;
A[7][10] = 10;
A[7][11] = 10;
A[7][13] = 10;
A[7][14] = 10;
A[7][17] = 10;
A[7][18] = 10;
A[7][20] = 10;
A[7][21] = 10;
A[7][22] = 10;
A[7][26] = 4;
A[7][27] = 10;
A[7][28] = 10;
A[7][30] = 10;
A[7][31] = 10;
A[7][41] = 4;
A[7][42] = 10;
A[7][43] = 10;
A[7][44] = 10;
A[7][45] = 10;
A[7][46] = 10;
A[7][47] = 10;
A[7][48] = 3;
A[8][5] = 10;
A[8][6] = 10;
A[8][8] = 10;
A[8][9] = 10;
A[8][10] = 10;
A[8][11] = 10;
A[8][13] = 10;
A[8][14] = 10;
A[8][17] = 10;
A[8][18] = 10;
A[8][20] = 10;
A[8][21] = 10;
A[8][22] = 10;
A[8][26] = 10;
A[8][27] = 10;
A[8][28] = 10;
A[8][30] = 10;
A[8][31] = 10;
A[8][32] = 10;
A[8][33] = 10;
A[8][34] = 3;
A[8][38] = 6;
A[8][41] = 10;
A[8][42] = 10;
A[8][43] = 10;
A[8][44] = 10;
A[8][45] = 10;
A[8][46] = 10;
A[8][47] = 10;
A[8][48] = 10;
A[9][5] = 10;
A[9][6] = 10;
A[9][10] = 10;
A[9][11] = 10;
A[9][13] = 10;
A[9][14] = 10;
A[9][15] = 10;
A[9][16] = 10;
A[9][17] = 10;
A[9][18] = 10;
A[9][20] = 10;
A[9][21] = 10;
A[9][23] = 1;
A[9][25] = 2;
A[9][27] = 10;
A[9][28] = 10;
A[9][30] = 10;
A[9][31] = 10;
A[9][32] = 10;
A[9][33] = 10;
A[9][34] = 2;
A[9][41] = 10;
A[9][42] = 10;
A[9][47] = 10;
A[9][48] = 10;
A[9][50] = 4;
A[9][51] = 3;
A[9][56] = 4;
A[9][57] = 3;
A[9][59] = 4;
A[9][60] = 10;
A[9][61] = 10;
A[9][62] = 10;
A[9][63] = 10;
A[9][64] = 10;
A[9][65] = 3;
A[9][67] = 4;
A[9][68] = 10;
A[9][69] = 10;
A[9][70] = 10;
A[9][71] = 10;
A[9][72] = 10;
A[9][73] = 3;
A[10][5] = 10;
A[10][6] = 10;
A[10][10] = 10;
A[10][11] = 10;
A[10][13] = 10;
A[10][14] = 10;
A[10][15] = 10;
A[10][16] = 10;
A[10][17] = 10;
A[10][18] = 10;
A[10][20] = 10;
A[10][21] = 10;
A[10][24] = 10;
A[10][27] = 10;
A[10][28] = 10;
A[10][30] = 10;
A[10][31] = 10;
A[10][41] = 10;
A[10][42] = 10;
A[10][47] = 10;
A[10][48] = 10;
A[10][50] = 10;
A[10][51] = 10;
A[10][56] = 10;
A[10][57] = 10;
A[10][59] = 10;
A[10][60] = 10;
A[10][61] = 10;
A[10][62] = 10;
A[10][63] = 10;
A[10][64] = 10;
A[10][65] = 2;
A[10][67] = 10;
A[10][68] = 10;
A[10][69] = 10;
A[10][70] = 10;
A[10][71] = 10;
A[10][72] = 10;
A[10][73] = 10;
A[11][5] = 10;
A[11][6] = 10;
A[11][10] = 10;
A[11][11] = 10;
A[11][13] = 10;
A[11][14] = 10;
A[11][17] = 10;
A[11][18] = 10;
A[11][20] = 10;
A[11][21] = 10;
A[11][27] = 10;
A[11][28] = 10;
A[11][30] = 10;
A[11][31] = 10;
A[11][32] = 10;
A[11][33] = 10;
A[11][34] = 10;
A[11][35] = 10;
A[11][36] = 3;
A[11][41] = 10;
A[11][42] = 10;
A[11][47] = 10;
A[11][48] = 10;
A[11][50] = 1;
A[11][51] = 10;
A[11][56] = 10;
A[11][57] = 2;
A[11][59] = 10;
A[11][60] = 10;
A[11][67] = 10;
A[11][68] = 10;
A[11][72] = 10;
A[11][73] = 10;
A[12][2] = 6;
A[12][5] = 1;
A[12][6] = 10;
A[12][7] = 10;
A[12][8] = 10;
A[12][9] = 10;
A[12][10] = 10;
A[12][11] = 2;
A[12][13] = 1;
A[12][14] = 2;
A[12][17] = 1;
A[12][18] = 2;
A[12][20] = 1;
A[12][21] = 2;
A[12][27] = 1;
A[12][28] = 2;
A[12][30] = 1;
A[12][31] = 10;
A[12][32] = 10;
A[12][33] = 10;
A[12][34] = 10;
A[12][35] = 10;
A[12][36] = 2;
A[12][41] = 10;
A[12][42] = 10;
A[12][45] = 9;
A[12][47] = 10;
A[12][48] = 10;
A[12][51] = 10;
A[12][52] = 3;
A[12][55] = 4;
A[12][56] = 10;
A[12][59] = 10;
A[12][60] = 10;
A[12][61] = 10;
A[12][62] = 10;
A[12][63] = 3;
A[12][65] = 9;
A[12][67] = 10;
A[12][68] = 10;
A[12][69] = 10;
A[12][70] = 10;
A[12][71] = 10;
A[12][72] = 10;
A[12][73] = 10;
A[13][41] = 10;
A[13][42] = 10;
A[13][47] = 10;
A[13][48] = 10;
A[13][51] = 1;
A[13][52] = 10;
A[13][55] = 10;
A[13][56] = 2;
A[13][59] = 10;
A[13][60] = 10;
A[13][61] = 10;
A[13][62] = 10;
A[13][63] = 2;
A[13][67] = 10;
A[13][68] = 10;
A[13][69] = 10;
A[13][70] = 10;
A[13][71] = 10;
A[13][72] = 10;
A[13][73] = 2;
A[14][41] = 10;
A[14][42] = 10;
A[14][47] = 10;
A[14][48] = 10;
A[14][52] = 10;
A[14][53] = 10;
A[14][54] = 10;
A[14][55] = 10;
A[14][59] = 10;
A[14][60] = 10;
A[14][67] = 10;
A[14][68] = 10;
A[14][69] = 10;
A[14][70] = 10;
A[15][25] = 8;
A[15][41] = 10;
A[15][42] = 10;
A[15][43] = 10;
A[15][44] = 10;
A[15][45] = 10;
A[15][46] = 10;
A[15][47] = 10;
A[15][48] = 10;
A[15][52] = 1;
A[15][53] = 10;
A[15][54] = 10;
A[15][55] = 2;
A[15][59] = 10;
A[15][60] = 10;
A[15][61] = 10;
A[15][62] = 10;
A[15][63] = 10;
A[15][64] = 10;
A[15][65] = 3;
A[15][67] = 10;
A[15][68] = 10;
A[15][70] = 1;
A[15][71] = 10;
A[15][72] = 3;
A[16][38] = 8;
A[16][41] = 1;
A[16][42] = 10;
A[16][43] = 10;
A[16][44] = 10;
A[16][45] = 10;
A[16][46] = 10;
A[16][47] = 10;
A[16][48] = 2;
A[16][53] = 1;
A[16][54] = 2;
A[16][59] = 1;
A[16][60] = 10;
A[16][61] = 10;
A[16][62] = 10;
A[16][63] = 10;
A[16][64] = 10;
A[16][65] = 2;
A[16][67] = 1;
A[16][68] = 2;
A[16][72] = 1;
A[16][73] = 2;
A[17][6] = 8;
A[17][16] = 6;
A[18][23] = 9;
A[18][31] = 6;
A[18][51] = 8;
A[18][56] = 6;
A[18][70] = 6;
A[19][48] = 9;
A[19][74] = 8;

}

void DISEGNA_GAME_OVER_GRAFICA()
{
	int a, b;

	for (a = 0; a < RIGHE; a++)
	{
		for (b = 0; b < COLONNE; b++)
		{		
			if (A[a][b] == 0)
				menu_0(a, b);		//terreno del gioco

			if (A[a][b] == 1)
				menu_1(a, b);		//angolo basso sinistro

            if (A[a][b] == 2)
				menu_2(a, b);		//angolo basso destro

            if (A[a][b] == 3)
				menu_3(a, b);		//angolo alto destro

            if (A[a][b] == 4)
				menu_4(a, b);		//angolo alto sinistro

            if (A[a][b] == 5)
				menu_5(a, b);		//angoli alti

			if (A[a][b] == 6)
				menu_6(a, b);		//angoli bassi

			if (A[a][b] == 7)
				menu_7(a, b);		//angoli sinistri
			
			if (A[a][b] == 8)
				menu_8(a, b);		//tutti gli angoli

			if (A[a][b] == 9)
				menu_9(a, b);		//FiveRun

			if (A[a][b] == 10)
				menu_10(a, b);		//intero
		}
	}
}
