
		/*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
		*																	*
		*							*** MENU ***							*
		*																	*
		*	Nome:			MENU.H											*
		*	Programmato da: Montalbano Marco								*
		*	Grafica di:		Brunelli Matteo									*
		*	Genere:			Libreria del gioco (menu grafico del gioco)		*
		*	Piattaforma:	Windows											*
		*	Copyright:		2005 / 2006										*
		*																	*
		*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*/



//Elenco funzioni contenute
	//funzione principale del gioco
		void MOSTRA_MENU_GRAFICO();
	//matrice per la posizione della grafica nel gioco
		void carica_matrice_del_menu();
	//disegna la grafica del menù
		void DISEGNA_MENU_GRAFICA();
	//

bool menu_gia_stampato = true;

void MOSTRA_MENU_GRAFICO()
{

	stampa_niente = true;

	if (menu_gia_stampato == false)
	{

		menu_gia_stampato = true;

		//Pulisce l'intero schermo
			glClear(GL_COLOR_BUFFER_BIT);
		azzera_matrice();
		DISEGNA_MENU_GRAFICA();
		carica_matrice_del_menu();
		DISEGNA_MENU_GRAFICA();

		system("cls");

		//Imposta colore bianco per la scrittura
		gotoxy(0,0);

		color(15);
		printf("			|----------------------------------|\n");
		printf("			|              ");
		color(10);
		printf("NUMBERUN");
		color(15);
		printf("            |\n");

		//Imposta colore bianco per la scrittura
		color(15);
		gotoxy(0,2);

		//Scrittura tabella
			//Scrittura della barra sottostante al gioco
				//Riga della tabella
					printf("			|----------------------------------|\n");
				//Nuovo gioco
					printf("			|     1.   |       NUOVO GIOCO     |\n");
				//Riga della tabella
					printf("			|----------|-----------------------|\n");
				//High score
					printf("			|     2.   |       HIGH SCORE      |\n");
				//Riga della tabella
					printf("			|----------|-----------------------|\n");
				//Guida
					printf("			|     3.   |          GUIDA        |\n");
				//Riga della tabella
					printf("			|----------|-----------------------|\n");
				//Crediti
					printf("			|     4.   |         CREDITI       |\n");
				//Riga della tabella
					printf("			|----------|-----------------------|\n");
				//Esci
					printf("			|     5.   |	       ESCI        |\n");
				//Riga della tabella
					printf("			|----------------------------------|\n");
		}
}

void carica_matrice_del_menu()
{

A[2][16] = 9;
A[2][24] = 6;
A[2][32] = 8;
A[2][41] = 6;
A[2][65] = 9;
A[2][76] = 6;
A[3][2] = 4;
A[3][3] = 10;
A[3][4] = 3;
A[3][9] = 4;
A[3][10] = 3;
A[3][51] = 4;
A[3][52] = 10;
A[3][53] = 10;
A[3][54] = 10;
A[3][55] = 10;
A[3][56] = 10;
A[3][57] = 3;
A[4][2] = 10;
A[4][3] = 10;
A[4][4] = 10;
A[4][9] = 10;
A[4][10] = 10;
A[4][51] = 10;
A[4][52] = 10;
A[4][53] = 10;
A[4][54] = 10;
A[4][55] = 10;
A[4][56] = 10;
A[4][57] = 10;
A[5][2] = 10;
A[5][3] = 10;
A[5][4] = 10;
A[5][9] = 10;
A[5][10] = 10;
A[5][13] = 4;
A[5][14] = 3;
A[5][18] = 4;
A[5][19] = 3;
A[5][22] = 4;
A[5][23] = 10;
A[5][24] = 3;
A[5][28] = 4;
A[5][29] = 10;
A[5][30] = 3;
A[5][33] = 4;
A[5][34] = 10;
A[5][35] = 10;
A[5][36] = 10;
A[5][37] = 3;
A[5][42] = 4;
A[5][43] = 10;
A[5][44] = 10;
A[5][45] = 10;
A[5][46] = 10;
A[5][47] = 10;
A[5][48] = 3;
A[5][51] = 10;
A[5][52] = 10;
A[5][56] = 10;
A[5][57] = 10;
A[5][60] = 4;
A[5][61] = 3;
A[5][65] = 4;
A[5][66] = 3;
A[5][69] = 4;
A[5][70] = 10;
A[5][71] = 3;
A[5][76] = 4;
A[5][77] = 3;
A[6][2] = 10;
A[6][3] = 10;
A[6][5] = 3;
A[6][9] = 10;
A[6][10] = 10;
A[6][13] = 10;
A[6][14] = 10;
A[6][18] = 10;
A[6][19] = 10;
A[6][22] = 10;
A[6][23] = 10;
A[6][24] = 10;
A[6][28] = 10;
A[6][29] = 10;
A[6][30] = 10;
A[6][33] = 10;
A[6][34] = 10;
A[6][35] = 10;
A[6][36] = 10;
A[6][37] = 10;
A[6][42] = 10;
A[6][43] = 10;
A[6][44] = 10;
A[6][45] = 10;
A[6][46] = 10;
A[6][47] = 10;
A[6][48] = 2;
A[6][51] = 10;
A[6][52] = 10;
A[6][56] = 10;
A[6][57] = 10;
A[6][60] = 10;
A[6][61] = 10;
A[6][65] = 10;
A[6][66] = 10;
A[6][69] = 10;
A[6][70] = 10;
A[6][71] = 10;
A[6][74] = 8;
A[6][76] = 10;
A[6][77] = 10;
A[7][2] = 10;
A[7][3] = 10;
A[7][5] = 1;
A[7][9] = 10;
A[7][10] = 10;
A[7][13] = 10;
A[7][14] = 10;
A[7][18] = 10;
A[7][19] = 10;
A[7][22] = 10;
A[7][23] = 10;
A[7][25] = 3;
A[7][27] = 4;
A[7][29] = 10;
A[7][30] = 10;
A[7][33] = 10;
A[7][34] = 10;
A[7][38] = 10;
A[7][39] = 3;
A[7][42] = 10;
A[7][43] = 10;
A[7][51] = 10;
A[7][52] = 10;
A[7][56] = 10;
A[7][57] = 2;
A[7][60] = 10;
A[7][61] = 10;
A[7][65] = 10;
A[7][66] = 10;
A[7][69] = 10;
A[7][70] = 10;
A[7][72] = 3;
A[7][76] = 10;
A[7][77] = 10;
A[8][2] = 10;
A[8][3] = 10;
A[8][6] = 3;
A[8][9] = 10;
A[8][10] = 10;
A[8][13] = 10;
A[8][14] = 10;
A[8][18] = 10;
A[8][19] = 10;
A[8][22] = 10;
A[8][23] = 10;
A[8][25] = 1;
A[8][27] = 2;
A[8][29] = 10;
A[8][30] = 10;
A[8][33] = 10;
A[8][34] = 10;
A[8][38] = 10;
A[8][39] = 2;
A[8][42] = 10;
A[8][43] = 10;
A[8][49] = 8;
A[8][51] = 10;
A[8][52] = 10;
A[8][53] = 10;
A[8][54] = 10;
A[8][55] = 10;
A[8][60] = 10;
A[8][61] = 10;
A[8][65] = 10;
A[8][66] = 10;
A[8][68] = 6;
A[8][69] = 10;
A[8][70] = 10;
A[8][72] = 1;
A[8][76] = 10;
A[8][77] = 10;
A[9][2] = 10;
A[9][3] = 10;
A[9][6] = 1;
A[9][9] = 10;
A[9][10] = 10;
A[9][13] = 10;
A[9][14] = 10;
A[9][18] = 10;
A[9][19] = 10;
A[9][22] = 10;
A[9][23] = 10;
A[9][26] = 10;
A[9][29] = 10;
A[9][30] = 10;
A[9][33] = 10;
A[9][34] = 10;
A[9][35] = 10;
A[9][36] = 10;
A[9][37] = 10;
A[9][42] = 10;
A[9][43] = 10;
A[9][44] = 10;
A[9][45] = 10;
A[9][46] = 3;
A[9][51] = 10;
A[9][52] = 10;
A[9][53] = 10;
A[9][54] = 10;
A[9][55] = 10;
A[9][60] = 10;
A[9][61] = 10;
A[9][65] = 10;
A[9][66] = 10;
A[9][69] = 10;
A[9][70] = 10;
A[9][73] = 3;
A[9][76] = 10;
A[9][77] = 10;
A[10][2] = 10;
A[10][3] = 10;
A[10][7] = 3;
A[10][9] = 10;
A[10][10] = 10;
A[10][13] = 10;
A[10][14] = 10;
A[10][18] = 10;
A[10][19] = 10;
A[10][22] = 10;
A[10][23] = 10;
A[10][26] = 10;
A[10][29] = 10;
A[10][30] = 10;
A[10][33] = 10;
A[10][34] = 10;
A[10][35] = 10;
A[10][36] = 10;
A[10][37] = 10;
A[10][42] = 10;
A[10][43] = 10;
A[10][44] = 10;
A[10][45] = 10;
A[10][46] = 2;
A[10][51] = 10;
A[10][52] = 10;
A[10][56] = 10;
A[10][57] = 3;
A[10][60] = 10;
A[10][61] = 10;
A[10][65] = 10;
A[10][66] = 10;
A[10][69] = 10;
A[10][70] = 10;
A[10][73] = 1;
A[10][76] = 10;
A[10][77] = 10;
A[11][2] = 10;
A[11][3] = 10;
A[11][7] = 1;
A[11][9] = 10;
A[11][10] = 10;
A[11][13] = 10;
A[11][14] = 10;
A[11][18] = 10;
A[11][19] = 10;
A[11][22] = 10;
A[11][23] = 10;
A[11][29] = 10;
A[11][30] = 10;
A[11][33] = 10;
A[11][34] = 10;
A[11][38] = 10;
A[11][39] = 3;
A[11][42] = 10;
A[11][43] = 10;
A[11][48] = 6;
A[11][51] = 10;
A[11][52] = 10;
A[11][56] = 10;
A[11][57] = 10;
A[11][60] = 10;
A[11][61] = 10;
A[11][65] = 10;
A[11][66] = 10;
A[11][69] = 10;
A[11][70] = 10;
A[11][74] = 3;
A[11][76] = 10;
A[11][77] = 10;
A[12][2] = 10;
A[12][3] = 10;
A[12][8] = 10;
A[12][9] = 10;
A[12][10] = 10;
A[12][13] = 10;
A[12][14] = 10;
A[12][18] = 10;
A[12][19] = 10;
A[12][22] = 10;
A[12][23] = 10;
A[12][29] = 10;
A[12][30] = 10;
A[12][33] = 10;
A[12][34] = 10;
A[12][38] = 10;
A[12][39] = 2;
A[12][42] = 10;
A[12][43] = 10;
A[12][51] = 10;
A[12][52] = 10;
A[12][56] = 10;
A[12][57] = 10;
A[12][60] = 10;
A[12][61] = 10;
A[12][65] = 10;
A[12][66] = 10;
A[12][69] = 10;
A[12][70] = 10;
A[12][74] = 1;
A[12][76] = 10;
A[12][77] = 10;
A[13][2] = 10;
A[13][3] = 10;
A[13][8] = 10;
A[13][9] = 10;
A[13][10] = 10;
A[13][13] = 10;
A[13][14] = 10;
A[13][15] = 10;
A[13][16] = 10;
A[13][17] = 10;
A[13][18] = 10;
A[13][19] = 10;
A[13][22] = 10;
A[13][23] = 10;
A[13][29] = 10;
A[13][30] = 10;
A[13][33] = 10;
A[13][34] = 10;
A[13][35] = 10;
A[13][36] = 10;
A[13][37] = 10;
A[13][42] = 10;
A[13][43] = 10;
A[13][44] = 10;
A[13][45] = 10;
A[13][46] = 10;
A[13][47] = 10;
A[13][48] = 3;
A[13][51] = 10;
A[13][52] = 10;
A[13][56] = 10;
A[13][57] = 10;
A[13][60] = 10;
A[13][61] = 10;
A[13][62] = 10;
A[13][63] = 10;
A[13][64] = 10;
A[13][65] = 10;
A[13][66] = 10;
A[13][69] = 10;
A[13][70] = 10;
A[13][75] = 10;
A[13][76] = 10;
A[13][77] = 10;
A[14][2] = 1;
A[14][3] = 2;
A[14][8] = 1;
A[14][9] = 10;
A[14][10] = 2;
A[14][13] = 1;
A[14][14] = 10;
A[14][15] = 10;
A[14][16] = 10;
A[14][17] = 10;
A[14][18] = 10;
A[14][19] = 2;
A[14][22] = 1;
A[14][23] = 2;
A[14][29] = 1;
A[14][30] = 2;
A[14][33] = 1;
A[14][34] = 10;
A[14][35] = 10;
A[14][36] = 10;
A[14][37] = 2;
A[14][42] = 1;
A[14][43] = 10;
A[14][44] = 10;
A[14][45] = 10;
A[14][46] = 10;
A[14][47] = 10;
A[14][48] = 2;
A[14][51] = 1;
A[14][52] = 2;
A[14][56] = 1;
A[14][57] = 2;
A[14][60] = 1;
A[14][61] = 10;
A[14][62] = 10;
A[14][63] = 10;
A[14][64] = 10;
A[14][65] = 10;
A[14][66] = 2;
A[14][69] = 1;
A[14][70] = 2;
A[14][75] = 1;
A[14][76] = 10;
A[14][77] = 2;
A[16][27] = 9;
A[16][72] = 9;
A[17][2] = 6;
A[17][10] = 9;
A[17][17] = 6;
A[17][34] = 5;
A[17][36] = 5;
A[17][39] = 7;
A[17][40] = 3;
A[17][44] = 4;
A[17][45] = 10;
A[17][46] = 3;
A[18][34] = 1;
A[18][36] = 2;
A[18][40] = 10;
A[18][44] = 10;
A[18][46] = 10;
A[18][52] = 9;
A[18][61] = 6;
A[18][76] = 6;
A[19][3] = 8;
A[19][21] = 8;
A[19][35] = 10;
A[19][40] = 10;
A[19][42] = 10;
A[19][44] = 1;
A[19][45] = 10;
A[19][46] = 2;
A[19][65] = 8;

}

void DISEGNA_MENU_GRAFICA()
{
	int a, b;

	for (a = 0; a < RIGHE; a++)
	{
		for (b = 0; b < COLONNE; b++)
		{		
			if (A[a][b] == 0)
				menu_0(a, b);		//terreno del gioco

			if (A[a][b] == 1)
				menu_1(a, b);		//angolo basso sinistro

            if (A[a][b] == 2)
				menu_2(a, b);		//angolo basso destro

            if (A[a][b] == 3)
				menu_3(a, b);		//angolo alto destro

            if (A[a][b] == 4)
				menu_4(a, b);		//angolo alto sinistro

            if (A[a][b] == 5)
				menu_5(a, b);		//angoli alti

			if (A[a][b] == 6)
				menu_6(a, b);		//angoli bassi

			if (A[a][b] == 7)
				menu_7(a, b);		//angoli sinistri
			
			if (A[a][b] == 8)
				menu_8(a, b);		//tutti gli angoli

			if (A[a][b] == 9)
				menu_9(a, b);		//FiveRun

			if (A[a][b] == 10)
				menu_10(a, b);		//intero
		}
	}
}
